{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/javascript-optimize-3","result":{"data":{"site":{"siteMetadata":{"title":"June"}},"markdownRemark":{"id":"03b88804-5293-578d-a29c-0344b2869f67","excerpt":"읽을수록 모르던 부분이 계속 등장하는데요, 3장도 바로 진행해보겠습니다. 3. DOM 스크립팅 DOM 병목이 쉽게 일어나고, 스크립팅 시간이 오래걸리는데 DOM에 대한 접근과 수정 DOM 요소의 스타일 변경, 화면 재구성을 초래하는 것 DOM 이벤트를 통한 사용자 상호작용 처리…","html":"<p>읽을수록 모르던 부분이 계속 등장하는데요, 3장도 바로 진행해보겠습니다.</p>\n<h2 id=\"3-DOM-스크립팅\" style=\"position:relative;\">3. DOM 스크립팅<a href=\"#3-DOM-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" aria-label=\"3 DOM 스크립팅 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>DOM 병목이 쉽게 일어나고, 스크립팅 시간이 오래걸리는데</p>\n<ol>\n<li>DOM에 대한 접근과 수정</li>\n<li>DOM 요소의 스타일 변경, 화면 재구성을 초래하는 것</li>\n<li>DOM 이벤트를 통한 사용자 상호작용 처리</li>\n</ol>\n<p>3가지를 주제로 진행하겠습니다.</p>\n<h3 id=\"3-1-브라우저-세계의-DOM\" style=\"position:relative;\">3-1. 브라우저 세계의 DOM<a href=\"#3-1-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%84%B8%EA%B3%84%EC%9D%98-DOM\" aria-label=\"3 1 브라우저 세계의 DOM permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>브라우저마다 DOM과 DOM 스크립팅에 각각 다른 엔진을 사용합니다.\n서로 다른 엔진간의 통신을 하기 때문에 느릴수 밖에 없는데요,\n그렇다면 어떻게 성능을 끌어올릴지 알아봅시다.</p>\n<h3 id=\"3-2-DOM-접근과-수정\" style=\"position:relative;\">3-2. DOM 접근과 수정<a href=\"#3-2-DOM-%EC%A0%91%EA%B7%BC%EA%B3%BC-%EC%88%98%EC%A0%95\" aria-label=\"3 2 DOM 접근과 수정 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>DOM에 접근하기만 해도 리소스를 소모합니다. 그런 상황에서 DOM을 수정한다면?\n더욱 많은 리소스를 잡아먹게 되겠죠? 최대한 DOM에 대한 접근을 최소화해야 하기 때문에\n수정 및 접근 작업에서 반복문은 최악입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">innerHTMLLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앞에서 봤던 이슈와 동일합니다. DOM에 대한 접근이 많아진다면 DOM을 변수에 할당하고 사용해야 합니다.\n위 코드는 DOM에 접근할 때 한번, DOM의 값을 바꿀 때 한번, 반복문을 돌 때마다 2번씩 요소에 접근하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">innerHTMLLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">15000</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    content <span class=\"token operator\">+=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 브라우저에서 이처럼 변수에 DOM을 저장하고 사용하는 것이 효과적으로 나타납니다.</p>\n<hr>\n<p>HTML 컬렉션을 반환하는 메서드에 대해서 알아보겠습니다.</p>\n<ol>\n<li>document.getElementsByName()</li>\n<li>document.getElementsByClassName()</li>\n<li>document.getElementsByTagName()</li>\n<li>document.images</li>\n<li>document.links</li>\n<li>document.forms</li>\n<li>document.forms[0].elements</li>\n</ol>\n<p>이러한 HTML Collection은 동적이기 때문에</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> alldivs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> alldivs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드가 무한루프로 동작하게 됩니다. body에 div 태그가 추가될 때마다\nalldivs는 동적으로 증가하기 때문에 i가 1씩 증가할 때 alldivs도 1씩 증가하기 때문입니다.\n(그렇기 때문에 <code class=\"language-text\">느.립.니.다.</code>)</p>\n<p>또한 HTML Collection은 일반 array가 아니기 때문에 반복문보다 느립니다. 그래서 사용할 때에는\n반복문에 복사한 뒤 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">coll</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> coll<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반복하거나 length에 접근하는 것만으로도 Collection을 갱신해야 하기 때문입니다.</p>\n<hr>\n<p>DOM의 특정 부분에 접근하는 방법에 대해 알아보겠습니다. childNodes나 nextSibling으로 형제 요소를\n선택하여 작업할 수 있는데</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">testNextSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  val el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ddd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      ch <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">,</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">testChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ddd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      ch <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">,</span>\n      len <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n      name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>둘 중 어떠한 방법을 사용해도 상관이 없습니다. 다만, childNodes 같은 경우엔\nlength를 캐시한 뒤 사용해야 합니다.</p>\n<p>자식요소를 조금 더 세밀하게 정해야 할 때가 있습니다.</p>\n<ol>\n<li>document.getElementById</li>\n<li>document.getElementsByName</li>\n<li>document.getElementsByClassName</li>\n<li>document.getElementsByTagName</li>\n</ol>\n<p>위 4가지 방식 뿐만 아니라</p>\n<ol>\n<li>document.querySelectorAll('#menu a')</li>\n<li>document.querySelector('#menu a')</li>\n</ol>\n<p>이런 방식 또한 가능합니다. 여러번 질의하는 것 보다는 querySelector가 훨씬 효율적입니다.</p>\n<h3 id=\"3-3-리페인트와-리플로우\" style=\"position:relative;\">3-3. 리페인트와 리플로우<a href=\"#3-3-%EB%A6%AC%ED%8E%98%EC%9D%B8%ED%8A%B8%EC%99%80-%EB%A6%AC%ED%94%8C%EB%A1%9C%EC%9A%B0\" aria-label=\"3 3 리페인트와 리플로우 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>브라우저가 데이터를 내려받으면 페이지 구조를 나타내는 DOM 트리와\nDOM 트리를 어떻게 표시할 지에 대한 정보를 가진 랜더 트리, 두가지를 만듭니다.</p>\n<p>두 트리를 다 만들면 브라우저는 페이지 요소를 표시합니다. (페인트)</p>\n<p>resize 이벤트가 발생하거나 비슷한 이벤트가 발생한다면 요소들의 정보를 다시 계산 (리플로우)해야하고\n계산 한 뒤 다시 그려줘야 합니다.(리페인트) 리소스를 많이 잡아먹는것이 리플로우인데 배경색만 바꾼다고\n가정한다면 리플로우 없이 리페인트만 일어납니다.</p>\n<p>이러한 경우 리소스가 많이 소모되지 않기 때문에 성능 저하가 일어나지 않습니다.\n그렇기 때문에 리플로우를 최소화 하는 작업이 필수입니다.</p>\n<p>리플로우가 일어나는 조건은</p>\n<ul>\n<li>\n<ol>\n<li>보이는 (display, visibility)DOM 요소를 추가 혹은 제거</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>요소의 위치가 바뀜</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>요소의 크기가 바뀜</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>텍스트의 내용 변경, 이미지가 다른 크기 이미지로 대체되는 등의 내용 변경</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>페이지를 처음 표시</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>브라우저 창의 크기 변경</li>\n</ol>\n</li>\n</ul>\n<p>어떤 것을 바꾸느냐에 따라 전체를, 일부를 다시 계산합니다.\n리플로우를 계속 발생하는 것도 낭비기 때문에 랜더 트리를 큐에 모았다 실행할 수 있습니다.</p>\n<ol>\n<li>offsetTop, offsetLeft, offsetWidht, offsetHeight</li>\n<li>scrollTop, scrollLeft, scrollWidht, scrollHeight</li>\n<li>clientTop, clientLeft, clientWidht, clientHeight</li>\n</ol>\n<p>이런 속성은 레이아웃을 바로바로 반영해야 하므로 브라우저가 랜더링 큐에 대기중인 랜더 트리와 함께\n강제로 리플로우를 진행합니다. 그렇기 때문에 스타일을 바꿀 때 <code class=\"language-text\">위 속성을 쓰지 않는게 중요합니다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> computed <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundColor<span class=\"token punctuation\">;</span>\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundImage<span class=\"token punctuation\">;</span>\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundAttachment<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드처럼 레이아웃을 속성을 변경하고, 값을 가져오는 일을 번갈아가며 하는 것을 매우 비효율적 이므로</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> computed <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\nbodyStyle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundColor<span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundImage<span class=\"token punctuation\">;</span>\ntmp <span class=\"token operator\">=</span> bodyStyle<span class=\"token punctuation\">.</span>backgroundAttachment<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 같은 일을 한꺼번에 몰아주는 것이 효율적이고 더 빠릅니다.</p>\n<p>그리고</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'divv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>borderLeft <span class=\"token operator\">=</span> <span class=\"token string\">'1px'</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>borderRight <span class=\"token operator\">=</span> <span class=\"token string\">'2px'</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'5px'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>최악의 경우 리플로우가 3번 일어나는 코드입니다. 이런 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'divv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">=</span> <span class=\"token string\">'border-left: 1px; border-right: 2px; padding: 5px;'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 바꿔줄 수 있습니다. 다른 방법으론 class를 토글하는 방법도 있습니다.</p>\n<hr>\n<p>하지만 어쩔 수 없이 여러번 계산을 해야 할 때에는 DOM의 변경을 문서의 흐름에서 분리하고\n다 변경된 후 적용시키는 방법이 있습니다.</p>\n<p>데이터를 넣은 &#x3C;li> 태그를 삽입한다고 가정할 때,\ncreateElement를 통해 li 여러개를 생성한 후, &#x3C;ul> 태그 안에 넣고\n가장 마지막에 DOM에 추가하는 것입니다. 이렇게 하면 리플로우를 최소화할 수 있습니다.</p>\n<hr>\n<p>애니메이션을 할 때에는 절대 위치를 지정한 후 동작해야합니다.\n절대 위치에서는 리플로우가 동작하지 않기 때문에 포지션 변경, 애니메이션, 포지션 복귀\n순서로 진행을 해야합니다.</p>\n<h3 id=\"3-4-이벤트-위임\" style=\"position:relative;\">3-4. 이벤트 위임<a href=\"#3-4-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84\" aria-label=\"3 4 이벤트 위임 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>자바스크립트에서 이벤트는 발생 후 부모 요소로 버블링되어 올라가므로 부모 요소에서 자식 요소의\n이벤트를 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같은 코드에서 &#x3C;a> 태그를 클릭하면 #two 요소, 그 다음으로 #one 요소, 마지막으로 window까지\n이벤트가 전파됩니다. 이렇게 이벤트가 퍼져 이벤트 대상이 아닌 다른 요소에서 이벤트를 동작시키는 것을\n위임이라고 합니다.</p>\n<p>물론 stopPropagation 메서드와 preventDefault 메서드로 위임을 제어할 수 있습니다.</p>\n<hr>\n<p>3장의 내용은 여기까지 입니다. 프론트엔드에서 가장 중요하다고 생각한 Reflow와 Repaint에 대한 내용이\n실려있는 장이었습니다. 앞으로도 많은 내용이 기대되네요!</p>","frontmatter":{"title":"자바스크립트 성능 최적화 3","date":"May 18, 2017","tags":["javascript","performance"]}}},"pageContext":{"slug":"/posts/javascript-optimize-3","previous":{"fields":{"slug":"/posts/front-end-question"},"frontmatter":{"title":"웹 front-end 개발 질문"}},"next":{"fields":{"slug":"/posts/javascript-optimize-1"},"frontmatter":{"title":"자바스크립트 성능 최적화 1"}}}},"staticQueryHashes":["1576648375","1963346411"]}